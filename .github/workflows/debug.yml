name: debug build

on:
  push:
    branches:
      - cicd

env:
  DOCKER_INTERMEDIATE_REPO: "nwodtuhs/exegol-builds"
  DOCKER_PROD_REPO: "nwodtuhs/exegol-dev"
  IMAGE_BASE_NAME: "debug"
  DOCKERFILE: "./debug.dockerfile"

jobs:
#  arm64_buildx:
#    timeout-minutes: 360
#    runs-on: [self-hosted, arm64]
#    steps:
#      -
#        name: Checkout
#        uses: actions/checkout@v3
#      -
#        name: Prepare build
#        id: prepare_build
#        run: |
#          IMAGE_NAME="${IMAGE_BASE_NAME}-arm64"
#          DOCKER_REPO=${DOCKER_INTERMEDIATE_REPO}
#          COMMIT_ID=$(git rev-parse "$GITHUB_SHA")
#          IMAGE_VERSION=${COMMIT_ID:0:8}
#          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
#          echo "image_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT
#          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
#          echo "image_full_name=${DOCKER_REPO}:${IMAGE_NAME}" >> $GITHUB_OUTPUT
#          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
#          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
#      -
#        name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#      -
#        name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#      -
#        name: Login to Dockerhub
#        if: success()
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      -
#        name: Build and load the image
#        if: success()
#        uses: docker/build-push-action@v3
#        with:
#          # outputs: type=image,push=true
#          load: true
#          build-args: |
#            TAG=${{ steps.prepare_build.outputs.image_name }}
#            VERSION=${{ steps.prepare_build.outputs.image_version }}
#            BUILD_DATE=${{ steps.prepare_build.outputs.build_date }}
#          tags: ${{ steps.prepare_build.outputs.image_full_name }}
#          platforms: linux/arm64
#          file: ${{env.DOCKERFILE}}
#          context: .
#      -
#        name: Image testing
#        if: success()
#        run: |
#          docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} tests
#      -
#        name: Push docker image
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.prepare_build.outputs.image_full_name }}
  amd64_buildx:
    timeout-minutes: 360
    runs-on: [self-hosted, amd64]
    outputs:
      matrix_cracking: ${{ steps.set-matrix.outputs.matrix_cracking }}
      matrix_osint: ${{ stps.set-matrix.outputs.matrix_osint }}
      matrix_web: ${{ stps.set-matrix.outputs.matrix_web }}
      matrix_c2: ${{ steps.set-matrix.outputs.matrix_c2 }}
      matrix_ad: ${{ steps.set-matrix.outputs.matrix_ad }}
      matrix_mobile: ${{ steps.set-matrix.outputs.matrix_mobile }}
      matrix_iot: ${{ stps.set-matrix.outputs.matrix_iot }}
      matrix_rfid: ${{ steps.set-matrix.outputs.matrix_rfid }}
      matrix_voip: ${{ steps.set-matrix.outputs.matrix_voip }}
      matrix_sdr: ${{ stps.set-matrix.outputs.matrix_sdr }}
      matrix_network: ${{ stps.set-matrix.outputs.matrix_network }}
      matrix_wifi_tools: ${{ steps.set-matrix.outputs.matrix_wifi_tools }}
      matrix_forensic_tools: ${{ steps.set-matrix.outputs.matrix_forensic_tools }}
      matrix_cloud_tools: ${{ stps.set-matrix.outputs.matrix_cloud_tools }}
      matrix_steganography_tools: ${{ stps.set-matrix.outputs.matrix_steganography_tools }}
      matrix_reverse_tools: ${{ stps.set-matrix.outputs.matrix_reverse_tools }}
      matrix_crypto_tools: ${{ steps.set-matrix.outputs.matrix_crypto_tools }}
      matrix_code_analysis_tools: ${{ stps.set-matrix.outputs.matrix_code_analysis_tools }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare build
        id: prepare_build
        run: |
          IMAGE_NAME="${IMAGE_BASE_NAME}-amd64"
          DOCKER_REPO=${DOCKER_INTERMEDIATE_REPO}
          COMMIT_ID=$(git rev-parse "$GITHUB_SHA")
          IMAGE_VERSION=${COMMIT_ID:0:8}
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "image_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_full_name=${DOCKER_REPO}:${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and load the image
        if: success()
        uses: docker/build-push-action@v3
        with:
          load: true
          build-args: |
            TAG=${{ steps.prepare_build.outputs.image_name }}
            VERSION=${{ steps.prepare_build.outputs.image_version }}
            BUILD_DATE=${{ steps.prepare_build.outputs.build_date }}
          tags: ${{ steps.prepare_build.outputs.image_full_name }}
          platforms: linux/amd64
          file: ${{env.DOCKERFILE}}
          context: .
      -
        name: List available tests
        id: set-matrix
        run: |
          echo "::set-output name=matrix_cracking::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_base | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_osint::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_misc | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_web::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_wordlists | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_c2::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_cracking | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_ad::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_osint | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_mobile::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_web | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_iot::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_c2 | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_rfid::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_ad | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_voip::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_mobile | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_sdr::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_iot | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_network::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_rfid | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_wifi_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_voip | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_forensic_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_sdr | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_cloud_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_network | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_steganography_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_wifi_tools | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_reverse_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_forensic_tools | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_crypto_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_cloud_tools | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=matrix_code_analysis_tools::$(docker run --rm ${{ steps.prepare_build.outputs.image_full_name }} cmd cat /.exegol/build_pipeline_tests/package_steganography_tools | jq -R -s -c 'split("\n")[:-1]')"
  amd64_tests:
    needs: amd64_buildx
    runs-on: [self-hosted, amd64]
    strategy:
      fail-fast: false
      matrix:
        matrix_cracking: ${{ fromJson(needs.amd64_buildx.outputs.matrix_cracking) }}
        matrix_osint: ${{ fromJson(needs.amd64_buildx.outputs.matrix_osint) }}
        matrix_web: ${{ fromJson(needs.amd64_buildx.outputs.matrix_web) }}
        matrix_c2: ${{ fromJson(needs.amd64_buildx.outputs.matrix_c2) }}
        matrix_ad: ${{ fromJson(needs.amd64_buildx.outputs.matrix_ad) }}
        matrix_mobile: ${{ fromJson(needs.amd64_buildx.outputs.matrix_mobile) }}
        matrix_iot: ${{ fromJson(needs.amd64_buildx.outputs.matrix_iot) }}
        matrix_rfid: ${{ fromJson(needs.amd64_buildx.outputs.matrix_rfid) }}
        matrix_voip: ${{ fromJson(needs.amd64_buildx.outputs.matrix_voip) }}
        matrix_sdr: ${{ fromJson(needs.amd64_buildx.outputs.matrix_sdr) }}
        matrix_network: ${{ fromJson(needs.amd64_buildx.outputs.matrix_network) }}
        matrix_wifi_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_wifi_tools) }}
        matrix_forensic_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_forensic_tools) }}
        matrix_cloud_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_cloud_tools) }}
        matrix_steganography_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_steganography_tools) }}
        matrix_reverse_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_reverse_tools) }}
        matrix_crypto_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_crypto_tools) }}
        matrix_code_analysis_tools: ${{ fromJson(needs.amd64_buildx.outputs.matrix_code_analysis_tools) }}
    steps:
      -
        name: Image command testing
        run: |
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_cracking }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_osint }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_web }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_c2 }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_ad }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_mobile }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_iot }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_rfid }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_voip }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_sdr }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_network }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_wifi_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_forensic_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_cloud_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_steganography_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_reverse_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_crypto_tools }}"
          docker run --rm ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64 cmd zsh -c "autoload -Uz compinit; compinit; source <(grep -v oh-my-zsh.sh ~/.zshrc); eval ${{ matrix.matrix_code_analysis_tools }}"
  push_amd64:
    needs: amd64_tests
    runs-on: [self-hosted, amd64]
    steps:
      -
        name: Login to Dockerhub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Push docker image
        run: docker push ${{ env.DOCKER_INTERMEDIATE_REPO }}:${{ env.IMAGE_BASE_NAME }}-amd64
  clean_amd64:
    needs: push_amd64
    runs-on: [self-hosted, amd64]
    if: always()  # always mode clean the environment even when the task is cancelled by a user
    steps:
      -
        name: Clean unused dangling images
        run: docker image prune --filter "label=org.exegol.app=Exegol" --force
#  manifest_build:
#    timeout-minutes: 60
#    needs: [arm64_buildx, amd64_buildx]
#    runs-on: self-hosted
#    steps:
#      - name: Login to Dockerhub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      -
#        name: Create and push manifest
#        if: success()
#        run: |
#          docker manifest create ${DOCKER_PROD_REPO}:${IMAGE_BASE_NAME} ${DOCKER_INTERMEDIATE_REPO}:${IMAGE_BASE_NAME}-arm64 ${DOCKER_INTERMEDIATE_REPO}:${IMAGE_BASE_NAME}-amd64
#          docker manifest push ${DOCKER_PROD_REPO}:${IMAGE_BASE_NAME}
#          docker manifest rm ${DOCKER_PROD_REPO}:${IMAGE_BASE_NAME}
#      -
#        name: Remove intermediate images
#        run: |
#          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
#          curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${DOCKER_INTERMEDIATE_REPO}/tags/${IMAGE_BASE_NAME}-arm64/
#          curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${DOCKER_INTERMEDIATE_REPO}/tags/${IMAGE_BASE_NAME}-amd64/
