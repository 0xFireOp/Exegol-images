on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REPO:
        required: true
        type: string
      IMAGE_BASE_NAME:
        required: true
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        required: true
        type: string
    secrets:
      DOCKER_PASSWORD:
        required: false
      DOCKER_USERNAME:
        required: false

jobs:
  tests:
    name: Tests ${{ inputs.ARCH }}
    needs:
      - buildx
      - push
      - testsdbg
    if: ${{ needs.buildx.outputs.matrix_tests != '[]' && needs.buildx.outputs.matrix_tests != '' }}  # TODO add push success constraint
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.buildx.outputs.matrix_tests) }}
    uses: ./.github/workflows/sub_testing.yml
    with:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
      ARCH: ${{ inputs.ARCH }}
      TESTS: ${{ matrix.tests }}

#  test1:
#    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
#    needs:
#      - buildx
#      - push
#    if: ${{ needs.buildx.outputs.matrix_p1 != '[]' && needs.buildx.outputs.matrix_p1 != '' }}
#    runs-on:
#      - self-hosted
#      - tester
#      - ${{ inputs.ARCH }}
#    strategy:
#      fail-fast: false
#      matrix:
#        command: ${{ fromJson(needs.buildx.outputs.matrix_p1) }}
#    steps:
#      - name: Image command testing
#        run: |
#          COMMAND=$(cat <<EOF
#          ${{ matrix.command }}
#          EOF
#          )
#          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
#          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
#          echo "$ ${COMMAND}"
#          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
#  test2:
#    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
#    needs:
#      - buildx
#      - push
#    if: ${{ needs.buildx.outputs.matrix_p2 != '[]' && needs.buildx.outputs.matrix_p2 != '' }}
#    runs-on:
#      - self-hosted
#      - tester
#      - ${{ inputs.ARCH }}
#    strategy:
#      fail-fast: false
#      matrix:
#        command: ${{ fromJson(needs.buildx.outputs.matrix_p2) }}
#    steps:
#      - name: Image command testing
#        run: |
#          COMMAND=$(cat <<EOF
#          ${{ matrix.command }}
#          EOF
#          )
#          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
#          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
#          echo "$ ${COMMAND}"
#          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
#  test3:
#    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
#    needs:
#      - buildx
#      - push
#    if: ${{ needs.buildx.outputs.matrix_p3 != '[]' && needs.buildx.outputs.matrix_p3 != '' }}
#    runs-on:
#      - self-hosted
#      - tester
#      - ${{ inputs.ARCH }}
#    strategy:
#      fail-fast: false
#      matrix:
#        command: ${{ fromJson(needs.buildx.outputs.matrix_p3) }}
#    steps:
#      - name: Image command testing
#        run: |
#          COMMAND=$(cat <<EOF
#          ${{ matrix.command }}
#          EOF
#          )
#          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
#          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
#          echo "$ ${COMMAND}"
#          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
#  test4:
#    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
#    needs:
#      - buildx
#      - push
#    if: ${{ needs.buildx.outputs.matrix_p4 != '[]' && needs.buildx.outputs.matrix_p4 != '' }}
#    runs-on:
#      - self-hosted
#      - tester
#      - ${{ inputs.ARCH }}
#    strategy:
#      fail-fast: false
#      matrix:
#        command: ${{ fromJson(needs.buildx.outputs.matrix_p4) }}
#    steps:
#      - name: Image command testing
#        run: |
#          COMMAND=$(cat <<EOF
#          ${{ matrix.command }}
#          EOF
#          )
#          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
#          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
#          echo "$ ${COMMAND}"
#          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'

